{"version":3,"file":"ng-masonry.umd.js.map","sources":["ng://ng-masonry/lib/ng-masonry.component.ts","ng://ng-masonry/lib/ng-masonry.directive.ts","ng://ng-masonry/lib/ng-masonry.module.ts"],"sourcesContent":["import {\n  Component,\n  OnInit,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  Input,\n  Output,\n  ElementRef,\n  EventEmitter,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { NgMasonryOptions } from './ng-masonry-options';\n\ndeclare var require: any;\nlet imagesLoaded: any;\nlet masonryConstructor: any;\n\n@Component({\n  selector: '[ng-masonry], ng-masonry',\n  template: '<ng-content></ng-content>',\n  styles: [\n    `\n\t\t:host {\n\t\t\tdisplay: block;\n\t\t}\n\t`\n  ]\n})\nexport class NgMasonryComponent implements OnInit, OnChanges, OnDestroy {\n  constructor(@Inject(PLATFORM_ID) private platformId: any, private _element: ElementRef) {}\n\n  public _msnry: any;\n\n  // Inputs\n  @Input() public options: NgMasonryOptions;\n  @Input() public useImagesLoaded: Boolean = false;\n  @Input() updateLayout: Boolean = false;\n\n  // Outputs\n  @Output() layoutComplete: EventEmitter<any[]> = new EventEmitter<any[]>();\n  @Output() removeComplete: EventEmitter<any[]> = new EventEmitter<any[]>();\n\n  ngOnInit() {\n    if (this.useImagesLoaded && imagesLoaded === undefined) {\n      imagesLoaded = require('imagesloaded');\n    }\n\n    if (isPlatformBrowser(this.platformId) && masonryConstructor === undefined) {\n      masonryConstructor = require('masonry-layout');\n    }\n\n    // Create masonry options object\n    if (!this.options) {\n      this.options = {};\n    }\n\n    // Set default itemSelector\n    if (!this.options.itemSelector) {\n      this.options.itemSelector = '[ngMasonryItem], ngMasonryItem';\n    }\n\n    if (isPlatformBrowser(this.platformId)) {\n      // Initialize Masonry\n      this._msnry = new masonryConstructor(this._element.nativeElement, this.options);\n\n      // Bind to events\n      this._msnry.on('layoutComplete', (items: any) => {\n        this.layoutComplete.emit(items);\n      });\n      this._msnry.on('removeComplete', (items: any) => {\n        this.removeComplete.emit(items);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // only update layout if it's not the first change\n    if (changes.updateLayout) {\n      if (!changes.updateLayout.firstChange) {\n        this.layout();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._msnry) {\n      this._msnry.destroy();\n    }\n  }\n\n  public layout() {\n    setTimeout(() => {\n      this._msnry.layout();\n    });\n  }\n\n  public reloadItems() {\n    setTimeout(() => {\n      this._msnry.reloadItems();\n    });\n  }\n\n  // public add(element: HTMLElement, prepend: boolean = false) {\n  public add(element: HTMLElement) {\n    let isFirstItem = false;\n\n    // Check if first item\n    if (this._msnry.items.length === 0) {\n      isFirstItem = true;\n    }\n\n    if (this.useImagesLoaded) {\n      imagesLoaded(element, (instance: any) => {\n        this._element.nativeElement.appendChild(element);\n\n        // Tell Masonry that a child element has been added\n        this._msnry.appended(element);\n\n        // layout if first item\n        if (isFirstItem) {\n          this.layout();\n        }\n      });\n\n      this._element.nativeElement.removeChild(element);\n    } else {\n      // Tell Masonry that a child element has been added\n      this._msnry.appended(element);\n\n      // layout if first item\n      if (isFirstItem) {\n        this.layout();\n      }\n    }\n  }\n\n  public remove(element: HTMLElement) {\n    // Tell Masonry that a child element has been removed\n    this._msnry.remove(element);\n\n    // Layout items\n    this.layout();\n  }\n}","import { Directive, Inject, ElementRef, forwardRef, OnDestroy, AfterViewInit, PLATFORM_ID } from '@angular/core';\n\nimport { isPlatformBrowser } from '@angular/common';\nimport { NgMasonryComponent } from './ng-masonry.component';\n\ninterface MutationWindow extends Window {\n  MutationObserver: any;\n  WebKitMutationObserver: any;\n}\n\ndeclare var window: MutationWindow;\n\n@Directive({\n  selector: '[ngMasonryItem], ngMasonryItem'\n})\nexport class NgMasonryDirective implements OnDestroy, AfterViewInit {\n  constructor(\n    private _element: ElementRef,\n    @Inject(forwardRef(() => NgMasonryComponent))\n    private _parent: NgMasonryComponent,\n    @Inject(PLATFORM_ID) private platformId: any\n  ) {}\n\n  ngAfterViewInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      this._parent.add(this._element.nativeElement);\n      this.watchForHtmlChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    if (isPlatformBrowser(this.platformId)) {\n      this._parent.remove(this._element.nativeElement);\n    }\n  }\n\n  /** When HTML in brick changes dinamically, observe that and change layout */\n  private watchForHtmlChanges(): void {\n    MutationObserver = window.MutationObserver || window.WebKitMutationObserver;\n\n    if (MutationObserver) {\n      /** Watch for any changes to subtree */\n      const self = this;\n      const observer = new MutationObserver(function(mutations, observerFromElement) {\n        self._parent.layout();\n      });\n\n      // define what element should be observed by the observer\n      // and what types of mutations trigger the callback\n      observer.observe(this._element.nativeElement, {\n        subtree: true,\n        childList: true\n      });\n    }\n  }\n}","import { NgModule } from '@angular/core';\nimport { NgMasonryComponent } from './ng-masonry.component';\nimport { NgMasonryDirective } from './ng-masonry.directive';\n\n@NgModule({\n  declarations: [NgMasonryComponent, NgMasonryDirective],\n  imports: [\n  ],\n  exports: [NgMasonryComponent, NgMasonryDirective]\n})\nexport class NgMasonryModule { }\n"],"names":["EventEmitter","isPlatformBrowser","Component","Inject","PLATFORM_ID","ElementRef","Input","Output","Directive","forwardRef","NgModule"],"mappings":";;;;;;;;;;AAAA;QAiBI,YAAiB;;QACjB,kBAAuB;AAE3B;QAYE,4BAAyC,UAAe,EAAU,QAAoB;YAA7C,eAAU,GAAV,UAAU,CAAK;YAAU,aAAQ,GAAR,QAAQ,CAAY;YAMtE,oBAAe,GAAY,KAAK,CAAC;YACxC,iBAAY,GAAY,KAAK,CAAC;;YAG7B,mBAAc,GAAwB,IAAIA,iBAAY,EAAS,CAAC;YAChE,mBAAc,GAAwB,IAAIA,iBAAY,EAAS,CAAC;SAXgB;;;;QAa1F,qCAAQ;;;YAAR;gBAAA,iBA+BC;gBA9BC,IAAI,IAAI,CAAC,eAAe,IAAI,YAAY,KAAK,SAAS,EAAE;oBACtD,YAAY,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;iBACxC;gBAED,IAAIC,wBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,kBAAkB,KAAK,SAAS,EAAE;oBAC1E,kBAAkB,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;iBAChD;;gBAGD,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;oBACjB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;iBACnB;;gBAGD,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE;oBAC9B,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,gCAAgC,CAAC;iBAC9D;gBAED,IAAIA,wBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;;oBAEtC,IAAI,CAAC,MAAM,GAAG,IAAI,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;;oBAGhF,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,gBAAgB;;;uBAAE,UAAC,KAAU;wBAC1C,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBACjC,EAAC,CAAC;oBACH,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,gBAAgB;;;uBAAE,UAAC,KAAU;wBAC1C,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBACjC,EAAC,CAAC;iBACJ;aACF;;;;;QAED,wCAAW;;;;YAAX,UAAY,OAAsB;;gBAEhC,IAAI,OAAO,CAAC,YAAY,EAAE;oBACxB,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,WAAW,EAAE;wBACrC,IAAI,CAAC,MAAM,EAAE,CAAC;qBACf;iBACF;aACF;;;;QAED,wCAAW;;;YAAX;gBACE,IAAI,IAAI,CAAC,MAAM,EAAE;oBACf,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;iBACvB;aACF;;;;QAEM,mCAAM;;;YAAb;gBAAA,iBAIC;gBAHC,UAAU;;mBAAC;oBACT,KAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;iBACtB,EAAC,CAAC;aACJ;;;;QAEM,wCAAW;;;YAAlB;gBAAA,iBAIC;gBAHC,UAAU;;mBAAC;oBACT,KAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;iBAC3B,EAAC,CAAC;aACJ;;;;;;;QAGM,gCAAG;;;;;;YAAV,UAAW,OAAoB;gBAA/B,iBA+BC;;oBA9BK,WAAW,GAAG,KAAK;;gBAGvB,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;oBAClC,WAAW,GAAG,IAAI,CAAC;iBACpB;gBAED,IAAI,IAAI,CAAC,eAAe,EAAE;oBACxB,YAAY,CAAC,OAAO;;;uBAAE,UAAC,QAAa;wBAClC,KAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;;wBAGjD,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;;wBAG9B,IAAI,WAAW,EAAE;4BACf,KAAI,CAAC,MAAM,EAAE,CAAC;yBACf;qBACF,EAAC,CAAC;oBAEH,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;iBAClD;qBAAM;;oBAEL,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;;oBAG9B,IAAI,WAAW,EAAE;wBACf,IAAI,CAAC,MAAM,EAAE,CAAC;qBACf;iBACF;aACF;;;;;QAEM,mCAAM;;;;YAAb,UAAc,OAAoB;;gBAEhC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;;gBAG5B,IAAI,CAAC,MAAM,EAAE,CAAC;aACf;;oBA7HFC,cAAS,SAAC;wBACT,QAAQ,EAAE,0BAA0B;wBACpC,QAAQ,EAAE,2BAA2B;iCAEnC,iDAIF;qBAED;;;;;wDAEcC,WAAM,SAACC,gBAAW;wBAxB/BC,eAAU;;;;8BA6BTC,UAAK;sCACLA,UAAK;mCACLA,UAAK;qCAGLC,WAAM;qCACNA,WAAM;;QAuGT,yBAAC;KA9HD;;;;;;ACpBA;QAgBE,4BACU,QAAoB,EAEpB,OAA2B,EACN,UAAe;YAHpC,aAAQ,GAAR,QAAQ,CAAY;YAEpB,YAAO,GAAP,OAAO,CAAoB;YACN,eAAU,GAAV,UAAU,CAAK;SAC1C;;;;QAEJ,4CAAe;;;YAAf;gBACE,IAAIN,wBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;oBACtC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;oBAC9C,IAAI,CAAC,mBAAmB,EAAE,CAAC;iBAC5B;aACF;;;;QAED,wCAAW;;;YAAX;gBACE,IAAIA,wBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;oBACtC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;iBAClD;aACF;;;;;;;QAGO,gDAAmB;;;;;YAA3B;gBACE,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,IAAI,MAAM,CAAC,sBAAsB,CAAC;gBAE5E,IAAI,gBAAgB,EAAE;;;;;wBAEd,MAAI,GAAG,IAAI;;wBACX,QAAQ,GAAG,IAAI,gBAAgB;;;;uBAAC,UAAS,SAAS,EAAE,mBAAmB;wBAC3E,MAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;qBACvB,EAAC;;;oBAIF,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE;wBAC5C,OAAO,EAAE,IAAI;wBACb,SAAS,EAAE,IAAI;qBAChB,CAAC,CAAC;iBACJ;aACF;;oBA1CFO,cAAS,SAAC;wBACT,QAAQ,EAAE,gCAAgC;qBAC3C;;;;;wBAd2BH,eAAU;wBAG7B,kBAAkB,uBAetBF,WAAM,SAACM,eAAU;;mDAAC,cAAM,OAAA,kBAAkB,GAAA,EAAC;wDAE3CN,WAAM,SAACC,gBAAW;;;QAmCvB,yBAAC;KA3CD;;;;;;ACZA;QAIA;SAMgC;;oBAN/BM,aAAQ,SAAC;wBACR,YAAY,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,CAAC;wBACtD,OAAO,EAAE,EACR;wBACD,OAAO,EAAE,CAAC,kBAAkB,EAAE,kBAAkB,CAAC;qBAClD;;QAC8B,sBAAC;KANhC;;;;;;;;;;;;;;;;;;;;;;;;"}
