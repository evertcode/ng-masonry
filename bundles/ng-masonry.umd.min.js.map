{"version":3,"sources":["ng://ng-masonry/lib/ng-masonry.component.ts","ng://ng-masonry/lib/ng-masonry.directive.ts","ng://ng-masonry/lib/ng-masonry.module.ts"],"names":["imagesLoaded","masonryConstructor","NgMasonryComponent","platformId","_element","this","useImagesLoaded","updateLayout","layoutComplete","EventEmitter","removeComplete","prototype","ngOnInit","_this","undefined","require","isPlatformBrowser","options","itemSelector","_msnry","nativeElement","on","items","emit","ngOnChanges","changes","firstChange","layout","ngOnDestroy","destroy","setTimeout","reloadItems","add","element","isFirstItem","length","instance","appendChild","appended","removeChild","remove","Component","args","selector","template","Inject","PLATFORM_ID","ElementRef","Input","Output","NgMasonryDirective","_parent","ngAfterViewInit","watchForHtmlChanges","MutationObserver","window","WebKitMutationObserver","self_1","mutations","observerFromElement","observe","subtree","childList","Directive","decorators","type","forwardRef","NgMasonryModule","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["import {\n  Component,\n  OnInit,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  Input,\n  Output,\n  ElementRef,\n  EventEmitter,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { NgMasonryOptions } from './ng-masonry-options';\n\ndeclare var require: any;\nlet imagesLoaded: any;\nlet masonryConstructor: any;\n\n@Component({\n  selector: '[ng-masonry], ng-masonry',\n  template: '<ng-content></ng-content>',\n  styles: [\n    `\n\t\t:host {\n\t\t\tdisplay: block;\n\t\t}\n\t`\n  ]\n})\nexport class NgMasonryComponent implements OnInit, OnChanges, OnDestroy {\n  constructor(@Inject(PLATFORM_ID) private platformId: any, private _element: ElementRef) {}\n\n  public _msnry: any;\n\n  // Inputs\n  @Input() public options: NgMasonryOptions;\n  @Input() public useImagesLoaded: Boolean = false;\n  @Input() updateLayout: Boolean = false;\n\n  // Outputs\n  @Output() layoutComplete: EventEmitter<any[]> = new EventEmitter<any[]>();\n  @Output() removeComplete: EventEmitter<any[]> = new EventEmitter<any[]>();\n\n  ngOnInit() {\n    if (this.useImagesLoaded && imagesLoaded === undefined) {\n      imagesLoaded = require('imagesloaded');\n    }\n\n    if (isPlatformBrowser(this.platformId) && masonryConstructor === undefined) {\n      masonryConstructor = require('masonry-layout');\n    }\n\n    // Create masonry options object\n    if (!this.options) {\n      this.options = {};\n    }\n\n    // Set default itemSelector\n    if (!this.options.itemSelector) {\n      this.options.itemSelector = '[ngMasonryItem], ngMasonryItem';\n    }\n\n    if (isPlatformBrowser(this.platformId)) {\n      // Initialize Masonry\n      this._msnry = new masonryConstructor(this._element.nativeElement, this.options);\n\n      // Bind to events\n      this._msnry.on('layoutComplete', (items: any) => {\n        this.layoutComplete.emit(items);\n      });\n      this._msnry.on('removeComplete', (items: any) => {\n        this.removeComplete.emit(items);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // only update layout if it's not the first change\n    if (changes.updateLayout) {\n      if (!changes.updateLayout.firstChange) {\n        this.layout();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._msnry) {\n      this._msnry.destroy();\n    }\n  }\n\n  public layout() {\n    setTimeout(() => {\n      this._msnry.layout();\n    });\n  }\n\n  public reloadItems() {\n    setTimeout(() => {\n      this._msnry.reloadItems();\n    });\n  }\n\n  // public add(element: HTMLElement, prepend: boolean = false) {\n  public add(element: HTMLElement) {\n    let isFirstItem = false;\n\n    // Check if first item\n    if (this._msnry.items.length === 0) {\n      isFirstItem = true;\n    }\n\n    if (this.useImagesLoaded) {\n      imagesLoaded(element, (instance: any) => {\n        this._element.nativeElement.appendChild(element);\n\n        // Tell Masonry that a child element has been added\n        this._msnry.appended(element);\n\n        // layout if first item\n        if (isFirstItem) {\n          this.layout();\n        }\n      });\n\n      this._element.nativeElement.removeChild(element);\n    } else {\n      // Tell Masonry that a child element has been added\n      this._msnry.appended(element);\n\n      // layout if first item\n      if (isFirstItem) {\n        this.layout();\n      }\n    }\n  }\n\n  public remove(element: HTMLElement) {\n    // Tell Masonry that a child element has been removed\n    this._msnry.remove(element);\n\n    // Layout items\n    this.layout();\n  }\n}","import { Directive, Inject, ElementRef, forwardRef, OnDestroy, AfterViewInit, PLATFORM_ID } from '@angular/core';\n\nimport { isPlatformBrowser } from '@angular/common';\nimport { NgMasonryComponent } from './ng-masonry.component';\n\ninterface MutationWindow extends Window {\n  MutationObserver: any;\n  WebKitMutationObserver: any;\n}\n\ndeclare var window: MutationWindow;\n\n@Directive({\n  selector: '[ngMasonryItem], ngMasonryItem'\n})\nexport class NgMasonryDirective implements OnDestroy, AfterViewInit {\n  constructor(\n    private _element: ElementRef,\n    @Inject(forwardRef(() => NgMasonryComponent))\n    private _parent: NgMasonryComponent,\n    @Inject(PLATFORM_ID) private platformId: any\n  ) {}\n\n  ngAfterViewInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      this._parent.add(this._element.nativeElement);\n      this.watchForHtmlChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    if (isPlatformBrowser(this.platformId)) {\n      this._parent.remove(this._element.nativeElement);\n    }\n  }\n\n  /** When HTML in brick changes dinamically, observe that and change layout */\n  private watchForHtmlChanges(): void {\n    MutationObserver = window.MutationObserver || window.WebKitMutationObserver;\n\n    if (MutationObserver) {\n      /** Watch for any changes to subtree */\n      const self = this;\n      const observer = new MutationObserver(function(mutations, observerFromElement) {\n        self._parent.layout();\n      });\n\n      // define what element should be observed by the observer\n      // and what types of mutations trigger the callback\n      observer.observe(this._element.nativeElement, {\n        subtree: true,\n        childList: true\n      });\n    }\n  }\n}","import { NgModule } from '@angular/core';\nimport { NgMasonryComponent } from './ng-masonry.component';\nimport { NgMasonryDirective } from './ng-masonry.directive';\n\n@NgModule({\n  declarations: [NgMasonryComponent, NgMasonryDirective],\n  imports: [\n  ],\n  exports: [NgMasonryComponent, NgMasonryDirective]\n})\nexport class NgMasonryModule { }\n"]}